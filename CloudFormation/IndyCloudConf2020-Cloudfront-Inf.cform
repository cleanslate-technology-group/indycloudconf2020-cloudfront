AWSTemplateFormatVersion: "2010-09-09"

Description: "This stack creates the necessary infrastructure for hosting a static S3 webpage served by CloudFront."

Parameters:
  StackPrefix:
    Description: Name of the current stack. Must be in all lowercase and no spaces.
    Type: String

  RootDomainName:
    Description: Domain name for your website (example.com)
    Type: String

  SSLCertificateArn:
    Description: Arn for the SSL certificate to use with cloudfront
    Type: String

  Route53HostedZoneID:
    Description: Hosted Zone ID for desired Route 53 DNS
    Type: String

  RepositoryName:
    Description: Name of the repository to deploy using Code Pipeline
    Type: String

  DeployBranchName:
    Description: Name of the branch to deploy using Code Pipeline
    Type: String

  SiteInvalidationFilePaths:
    Description: CSV list of file paths to include in the CloudFront invalidation
    Type: String
    Default: "/*"

  LambdaCodePackagesBucket:
    Description: Name of the bucket that contains code packages for lambda. Note this bucket needs to have been created ahead of time
    Type: String

  LambdaInvalidateCFS3Key:
    Description: Path in the LambdaCodePackagesBucket that contains the code package for the lambda used to invalidate cloudfront.
    Type: String

  LambdaCopyS3ObjectsS3Key:
    Description: Path in the LambdaCodePackagesBucket that contains the code package for lambda used to copy media files to the static site bucket.
    Type: String

  StaticSiteMediaS3Bucket:
    Description: Name of the S3 bucket used to store the media files for the static site.
    Type: String

Resources:
# IAM 
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${StackPrefix}-static-site-codepipeline"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'sqs:*'
                Resource: '*'

  LambdaInvalidateCloudFront:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${StackPrefix}-lambda-cloudfront-invalidation"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudfront:*'
                  - 'codepipeline:PutJobFailureResult'
                  - 'codepipeline:PutJobSuccessResult'
                  - 'logs:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codepipeline:UpdatePipeline'
                Resource: 'arn:aws:codepipeline:*:*:*'
              - Effect: Allow
                Action:
                  - 'codepipeline:PutApprovalResult'
                Resource: 'arn:aws:codepipeline:*:*:*/*/*'

  LambdaPipelineCopyS3:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${StackPrefix}-lambda-cloudfront-invalidation"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codepipeline:PutJobFailureResult'
                  - 'codepipeline:PutJobSuccessResult'
                  - 'logs:*'
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codepipeline:UpdatePipeline'
                Resource: 'arn:aws:codepipeline:*:*:*'
              - Effect: Allow
                Action:
                  - 'codepipeline:PutApprovalResult'
                Resource: 'arn:aws:codepipeline:*:*:*/*/*'
# Commenting out Trigger for building on Check In, uncomment if you want to deploy on check into master
  # EventsTriggerPipeline:
  #     Type: 'AWS::IAM::Role'
  #     Properties:
  #       AssumeRolePolicyDocument:
  #         Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Principal:
  #               Service:
  #                 - events.amazonaws.com
  #             Action: 'sts:AssumeRole'
  #       Path: /
  #       Policies:
  #         - PolicyName: !Sub "${StackPrefix}-trigger-pipeline"
  #           PolicyDocument:
  #             Version: 2012-10-17
  #             Statement:
  #               - Effect: Allow
  #                 Action: 'codepipeline:StartPipelineExecution'
  #                 Resource: !Join 
  #                   - ''
  #                   - - 'arn:aws:codepipeline:'
  #                     - !Ref 'AWS::Region'
  #                     - ':'
  #                     - !Ref 'AWS::AccountId'
  #                     - ':'
  #                     - !Ref SitePipeline

# S3
  StaticSite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackPrefix}-static-site"
      AccessControl: BucketOwnerFullControl
  
  CloudFrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSite
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt [CFOAI , S3CanonicalUserId]
            Action: "s3:GetObject"
            Resource: !Sub "${StaticSite.Arn}/*"

  CFLogging:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackPrefix}-cloudfront-logging"
      AccessControl: BucketOwnerFullControl

  PipelineArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackPrefix}-pipeline-artifacts"
      AccessControl: BucketOwnerFullControl

# CloudFront
  CFOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: "OAI for static site"

  CFDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt StaticSite.DomainName
          Id: s3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOAI}"
        Enabled: 'true'
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: 'false'
          Bucket: !GetAtt CFLogging.DomainName
        Aliases:
        - !Sub
          - www.${Domain}
          - Domain: !Ref RootDomainName
        - !Ref RootDomainName
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: s3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

# Lambda
  CopyS3Objects:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
          S3Bucket: !Ref LambdaCodePackagesBucket
          S3Key: !Ref LambdaCopyS3ObjectsS3Key
      Description: "This function is used to copy static site media to the prod bucket"
      FunctionName: !Sub "${StackPrefix}-static-site-s3-copy-objects"
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - LambdaPipelineCopyS3
        - Arn
      Runtime: python3.8
      Timeout: 600

  InvalidateCloudFrontLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
          S3Bucket: !Ref LambdaCodePackagesBucket
          S3Key: !Ref LambdaInvalidateCFS3Key
      Description: "This function is used to invalidate cloudfront for the static site"
      FunctionName: !Sub "${StackPrefix}-static-site-cf-invalidations"
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - LambdaInvalidateCloudFront
        - Arn
      Runtime: python3.8
      Timeout: 600

# Route 53
  Route53ApexRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget:
        DNSName: !GetAtt CFDistro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref Route53HostedZoneID
      Name: !Ref RootDomainName
      Type: A

  Route53WWWRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CFDistro.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref Route53HostedZoneID
      Name: !Sub
          - www.${Domain}
          - Domain: !Ref RootDomainName
      Type: A

# CodePipeline
  SitePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: static-site-pipeline
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                BranchName: !Ref DeployBranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: DeploySite
          Actions:
            - Name: DeploySite
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Ref StaticSite
                Extract: true
              RunOrder: 2
            - Name: DeployMedia
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref CopyS3Objects
                UserParameters: !Sub "{\"sourceBucket\":\"${StaticSiteMediaS3Bucket}\",\"destinationBucket\":\"${StaticSite}\"}"
              RunOrder: 1
        - Name: UpdateCloudFront
          Actions:
            - Name: UpdateCloudFront
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref InvalidateCloudFrontLambda
                UserParameters: !Sub "{\"distributionId\":\"${CFDistro}\",\"invalidationPaths\":\"${SiteInvalidationFilePaths}\"}"
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifacts
    DependsOn: [InvalidateCloudFrontLambda,CFDistro]

# Commenting out Trigger for building on Check In, uncomment if you want to deploy on check into master
# CloudWatch Events
  # TriggerPipeline:
  #   Type: 'AWS::Events::Rule'
  #   Properties:
  #     EventPattern:
  #       source:
  #         - aws.codecommit
  #       detail-type:
  #         - CodeCommit Repository State Change
  #       resources:
  #         - !Join 
  #           - ''
  #           - - 'arn:aws:codecommit:'
  #             - !Ref 'AWS::Region'
  #             - ':'
  #             - !Ref 'AWS::AccountId'
  #             - ':'
  #             - !Ref RepositoryName
  #       detail:
  #         event:
  #           - referenceCreated
  #           - referenceUpdated
  #         referenceType:
  #           - branch
  #         referenceName:
  #           - master
  #     Targets:
  #       - Arn: !Join 
  #           - ''
  #           - - 'arn:aws:codepipeline:'
  #             - !Ref 'AWS::Region'
  #             - ':'
  #             - !Ref 'AWS::AccountId'
  #             - ':'
  #             - !Ref SitePipeline
  #         RoleArn: !GetAtt 
  #           - EventsTriggerPipeline
  #           - Arn
  #         Id: !Sub "${StackPrefix}-pipeline"

Outputs:
  ApexURL:
    Value: !Ref Route53ApexRecord
    Description: Base URL

  WWWURL:
    Value: !Ref Route53WWWRecord
    Description: WWW URL